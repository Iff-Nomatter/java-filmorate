create table IF NOT EXISTS FILM
(
    FILM_ID      INTEGER not null GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    NAME         CHARACTER VARYING,
    DESCRIPTION  CHARACTER VARYING,
    RELEASE_DATE TIMESTAMP,
    DURATION     INTEGER,
    RATING       INTEGER,
    DIRECTOR_ID  INTEGER,
    constraint FILM_ID
        primary key (FILM_ID)
);

create table IF NOT EXISTS GENRE
(
    GENRE_ID INTEGER not null,
    GENRE    CHARACTER VARYING,
    constraint GENRE_ID
        primary key (GENRE_ID)
);

create table IF NOT EXISTS FILM_GENRE
(
    FILM_ID  INTEGER not null,
    GENRE_ID INTEGER not null,
    constraint FILM_GENRE_PK
        primary key (FILM_ID, GENRE_ID),
    constraint "FILM_GENRE_film_FK"
        foreign key (FILM_ID) references FILM ON DELETE CASCADE,
    constraint "FILM_GENRE_genre_FK"
        foreign key (GENRE_ID) references GENRE
);

create table IF NOT EXISTS USERS
(
    USER_ID  INTEGER not null GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    NAME     CHARACTER VARYING,
    LOGIN    CHARACTER VARYING,
    BIRTHDAY TIMESTAMP,
    EMAIL    CHARACTER VARYING,
    constraint TABLE_NAME_PK
        primary key (USER_ID)
);

create table IF NOT EXISTS FILM_LIKE
(
    FILM_ID INTEGER not null,
    USER_ID INTEGER not null,
    constraint FILM_LIKE_PK
        primary key (FILM_ID, USER_ID),
    constraint FILM_LIKE_FILM_FK
        foreign key (FILM_ID) references FILM ON DELETE CASCADE,
    constraint FILM_LIKE_USER_FK
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

create table IF NOT EXISTS USER_FRIEND
(
    USER_ID           INTEGER not null,
    FRIEND_ID         INTEGER not null,
    FRIENDSHIP_STATUS CHARACTER VARYING,
    constraint USER_FRIEND_PK
        primary key (USER_ID, FRIEND_ID),
    constraint FRIEND_ID
        foreign key (USER_ID) references USERS ON DELETE CASCADE,
    constraint USER_ID
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

create table IF NOT EXISTS FILM_RATING
(
    RATING_ID INTEGER not null,
    MPA       CHARACTER VARYING,
    constraint FILM_RATING_PK
        primary key (RATING_ID)
);

create table IF NOT EXISTS USER_FEED
(
    EVENT_ID INTEGER not null GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    USER_ID INTEGER not null,
    ENTITY_ID INTEGER not null,
    EVENT_TYPE CHARACTER VARYING,
    OPERATION CHARACTER VARYING,
    EVENT_TIME BIGINT,
    constraint EVENT_ID_PK
        primary key (EVENT_ID),
    constraint USER_ID_FK
        foreign key (USER_ID) references USERS ON DELETE CASCADE
);

create table IF NOT EXISTS FILM_REVIEW
(
    ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONTENT CLOB NOT NULL,
    IS_POSITIVE BOOLEAN NOT NULL,
    USEFUL INTEGER DEFAULT 0,
    FILM_ID INTEGER REFERENCES FILM(FILM_ID) ON DELETE CASCADE,
    USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE
);

create table IF NOT EXISTS REVIEW_LIKE
(
    FILM_REVIEW_ID INTEGER REFERENCES FILM_REVIEW(ID) ON DELETE CASCADE,
    USER_ID INTEGER REFERENCES USERS(USER_ID) ON DELETE CASCADE,
    IS_POSITIVE BOOLEAN NOT NULL
);

create table IF NOT EXISTS FILM_DIRECTOR
(
    DIRECTOR_ID INTEGER not null GENERATED BY DEFAULT AS IDENTITY (START WITH 1),
    NAME       CHARACTER VARYING,
    constraint FILM_DIRECTOR_PK
        primary key (DIRECTOR_ID),
    constraint FILM_DIRECTOR_FILM_FK
        foreign key (DIRECTOR_ID) references FILM
);